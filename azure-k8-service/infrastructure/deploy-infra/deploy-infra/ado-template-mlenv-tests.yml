# Template pipeline for the ML Environment Tests
#
# :param report_name: Name for the test report and ADO task
# :param spc: Service Principal Client - identity used to run the tests

steps:
# [temp] clean up of pipeline wd as not done by ADO
- script: |
    rm -r $(Pipeline.Workspace)/$(armArtifactName)/*
  displayName: Clean up pipeline workspace
  
- download: current
  artifact: $(armArtifactName)

# Post-deployment infrastructure tests
- task: AzureCLI@1
  displayName: 'Build and push image for post-deployment tests'
  inputs:
    azureSubscription: $(serviceConnection)
    scriptLocation: inlineScript
    workingDirectory: $(Pipeline.Workspace)/$(armArtifactName)/scripts
    inlineScript: 'sh buildPublishDocker.sh $(containerRegistryInstance) $(environment)'

- script: |
    pip install -r $(Pipeline.Workspace)/$(armArtifactName)/tests/testartifacts/requirements.txt --user
  displayName: Prepare Environment

- task: AzureCLI@1
  displayName: 'Test: (spc) ${{ parameters.report_name }}'
  inputs:
    azureSubscription: ${{ parameters.spc }}
    scriptLocation: inlineScript
    inlineScript: |
      # create test config file
      subscription=$(az account list --query "[?isDefault].id | [0]" --output tsv)
      echo {\"subscription_id\":\"$subscription\", \"resource_group\":\"$(resource_group_name)\", \"workspace_name\":\"$(workspaceName)-$(environment)\", \"acr\":\"$(containerRegistryInstance)$(environment)\"} > ./aml_ws_config.json
      # run tests
      python -m pytest --junit-xml $(Pipeline.Workspace)/testresults/role_${{ parameters.report_name }}_report.xml --cache-clear
    workingDirectory: '$(Pipeline.Workspace)/$(armArtifactName)/tests/'

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFiles: '$(Pipeline.Workspace)/testresults/role_${{ parameters.report_name }}_report.xml'
  condition: succeededOrFailed()
