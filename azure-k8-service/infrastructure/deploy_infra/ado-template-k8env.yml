# Template pipeline for the AKS Environment Deployment
# This includes shared infrastructure and n AKS workspaces, compute and
# their configuration.
# 
#
# :param environment: the environment for deployment e.g. dev

jobs:
  - job: SharedInfraDeployment
  - deployment: KubernetesEnvironmentDeployment
    pool:
      vmImage: '${{ parameters.vmImage }}'
    environment: '${{ parameters.environment }}'
    variables:
      - group: k8-vg-dev
      - name: RESOURCE_GROUP_NAME
        value: $(BASE_NAME)-rg-$(ENV)
      - name: STORAGE_NAME
        value: $(BASE_NAME)storage$(ENV)
      - name: KEYVAULT_NAME
        value: $(BASE_NAME)-kv-$(ENV)
      - name: SORAGE_CONTAINER_NAME
        value: tfstate
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@1
            displayName: 'Deployment: Resource Group'
            inputs:
              azureSubscription: $(AZURE_RM_SVC_CONNECTION)
              scriptLocation: 'inlineScript'
              inlineScript: |
                            az group create -n $(RESOURCE_GROUP_NAME) \
                            -l $(LOCATION)

          - task: AzureCLI@1
            displayName: 'Deployment: Storage'
            inputs:
              azureSubscription: $(AZURE_RM_SVC_CONNECTION)
              scriptLocation: 'inlineScript'
              inlineScript: |
                            az storage account create -n $(STORAGE_NAME) -g $(RESOURCE_GROUP_NAME) -l $(LOCATION)

          - task: AzureCLI@1
            displayName: 'Deployment: terraform state container'
            inputs:
              azureSubscription: $(AZURE_RM_SVC_CONNECTION)
              scriptLocation: 'inlineScript'
              inlineScript: |
                            az storage container create -n $(SORAGE_CONTAINER_NAME) --account-name $(STORAGE_NAME)

          - task: AzureCLI@1
            displayName: Check if KeyVault exists & deploy
            condition: ne(variables['deploymentMode'], 'Validation')
            inputs:
              azureSubscription: $(AZURE_RM_SVC_CONNECTION)
              scriptLocation: inlineScript
              workingDirectory: $(Pipeline.Workspace)/$(armArtifactName)/scripts
              inlineScript: 'sh check-keyvault.sh $(KEYVAULT_NAME) $(LOCATION) $(RESOURCE_GROUP_NAME)'

          # - task: AzureCLI@1
          #   displayName: 'Deployment: Key Vault'
          #   inputs:
          #     azureSubscription: $(AZURE_RM_SVC_CONNECTION)
          #     scriptLocation: 'inlineScript'
          #     deploymentMode: $(deploymentMode)
          #     inlineScript: |
          #                   az keyvault create -n $(KEYVAULT_NAME) -g $(RESOURCE_GROUP_NAME) -l $(LOCATION)

          - task: AzureCLI@1
            displayName: 'Deployment: Creating a SAS Token for the storage account'
            inputs:
              azureSubscription: $(AZURE_RM_SVC_CONNECTION)
              scriptLocation: 'inlineScript'
              inlineScript: |
                            az storage container generate-sas --account-name $(STORAGE_NAME) --expiry 2022-01-01 --name $(SORAGE_CONTAINER_NAME) --permissions dlrw -o json | xargs az keyvault secret set --vault-name $(KEYVAULT_NAME) --name TerraformSASToken --value

          - task: AzureCLI@1
            displayName: 'Deployment: creating an ssh key'
            inputs:
              azureSubscription: $(AZURE_RM_SVC_CONNECTION)
              scriptLocation: 'inlineScript'
              inlineScript: |
                            ssh-keygen  -f ~/.ssh/id_rsa_terraform -q -P ""

          - task: AzureCLI@1
            displayName: 'Deployment: store the public key in Azure KeyVault'
            inputs:
              azureSubscription: $(AZURE_RM_SVC_CONNECTION)
              scriptLocation: 'inlineScript'
              inlineScript: |
                            az keyvault secret set --vault-name $(KEYVAULT_NAME) --name LinuxSSHPubKey -f ~/.ssh/id_rsa_terraform.pub >/dev/null

          - task: AzureCLI@1
            displayName: 'Deployment: store the service principal id in Azure KeyVault'
            inputs:
              azureSubscription: $(AZURE_RM_SVC_CONNECTION)
              scriptLocation: 'inlineScript'
              inlineScript: |
                            az keyvault secret set --vault-name $(KEYVAULT_NAME) --name SPNID --value $(SP_APP_ID) >/dev/null


          
  - job: Terraform Deployment
    continueOnError: false
    variables:
      - group: k8-vg-dev
      - name: RESOURCE_GROUP_NAME
        value: $(BASE_NAME)-rg-$(ENV)
      - name: STORAGE_NAME
        value: $(BASE_NAME)storage$(ENV)
      - name: KEYVAULT_NAME
        value: $(BASE_NAME)-kv-$(ENV)
      - name: SORAGE_CONTAINER_NAME
        value: tfstate
    steps:
    - publish: '$(Build.SourcesDirectory)/azure-k8-service/infrastructure/tf-templates'
      artifact: terraform_out

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Use Terraform v0.14.8'
      inputs:
        terraformVersion: 0.14.8

      # variables:
      #   backendServiceArm: $(AZURE_RM_SVC_CONNECTION)
      #   terraformstoragerg: $(AZURE_RM_SVC_CONNECTION)
      #   terraformstorageaccount: 'terraformstorage8ff03276'


    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'TF init - Deploy AKS resources to Azure'
      inputs:
        command: init
        workingDirectory: '$(Build.SourcesDirectory)/azure-k8-service/infrastructure/tf-templates'
        backendType: azurerm
        backendServiceArm: '$(AZURE_RM_SVC_CONNECTION)'
        ensureBackend: true
        backendAzureRmResourceGroupLocation: $(LOCATION)
        backendAzureRmResourceGroupEnvironment: $(ENV)
        backendAzureRmResourceGroupName: $(RESOURCE_GROUP_NAME)
        backendAzureRmStorageAccountName: $(STORAGE_NAME)
        backendAzureRmContainerName: $(SORAGE_CONTAINER_NAME)
        backendAzureRmKey: 'aksinfra.tfstate'


    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'TF validate - Deploy AKS resources to Azure'
      inputs:
        command: validate
        workingDirectory: '$(Build.SourcesDirectory)/azure-k8-service/infrastructure/tf-templates'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'TF plan - Deploy AKS resources to Azure'
      inputs:
        command: plan
        commandOptions: '-lock=false'
        workingDirectory: '$(Build.SourcesDirectory)/azure-k8-service/infrastructure/tf-templates'
        environmentServiceNameAzureRM: '$(AZURE_RM_SVC_CONNECTION)'
      env:
        TF_VAR_BASE_NAME: $(BASE_NAME)
        TF_VAR_ENV: $(ENV)
        TF_VAR_RESOURCE_GROUP: $(RESOURCE_GROUP_NAME)

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'TF apply - Deploy AKS resources to Azure'
      inputs:
        command: apply
        workingDirectory: '$(Build.SourcesDirectory)/azure-k8-service/infrastructure/tf-templates'
        environmentServiceNameAzureRM: $(AZURE_RM_SVC_CONNECTION)
      env:
        TF_VAR_BASE_NAME: $(BASE_NAME)
        TF_VAR_ENV: $(ENV)
        TF_VAR_RESOURCE_GROUP: $(RESOURCE_GROUP_NAME)
