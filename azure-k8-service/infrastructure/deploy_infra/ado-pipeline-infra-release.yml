# Kubernetes Infrastructure Release
#
# This pipeline's scope is to validate and deploy infrastructural
# changes to the K8s environments. This includes:
#
# * a stage to publish TF templates and tests
# * a stage to deploy and validate the functional working of the
#   deployed infrastructure in an integration environment
#
# This pipeline is automatically triggered on any change in the tf-templates
# folder containing this ADO pipeline definition and infra-as-code.

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - azure-k8-service/infrastructure/tf-templates/*
    - azure-k8-service/infrastructure/deploy_infra/*
pr:
  branches:
    include:
    - master
  paths:
    include:
    - azure-k8-service/infrastructure/tf-templates/*
    - azure-k8-service/infrastructure/deploy_infra/*

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: k8-vg-dev
- name: RESOURCE_GROUP_NAME
  value: $(BASE_NAME)-rg-$(ENV)
- name: STORAGE_NAME
  value: $(BASE_NAME)storage$(ENV)



steps:
- task: AzureCLI@1
  displayName: 'Deployment: Resource Group'
  inputs:
    azureSubscription: $(AZURE_RM_SVC_CONNECTION)
    scriptLocation: 'inlineScript'
    inlineScript: |
                  az group create -n $(RESOURCE_GROUP_NAME) \
                  -l $(LOCATION)
- task: AzureCLI@1
  displayName: 'Deployment: Storage'
  inputs:
    azureSubscription: $(AZURE_RM_SVC_CONNECTION)
    scriptLocation: 'inlineScript'
    inlineScript: |
                  az storage account create -n $(STORAGE_NAME) -g $(RESOURCE_GROUP_NAME) -l $(LOCATION)

- task: AzureCLI@1
  displayName: 'Deployment: tfstate container'
  inputs:
    azureSubscription: $(AZURE_RM_SVC_CONNECTION)
    scriptLocation: 'inlineScript'
    inlineScript: |
                  az storage container create -n tfstate --account-name $(STORAGE_NAME)

  - task: AzureCLI@1
  displayName: Check if KeyVault exists
  condition: ne(variables['deploymentMode'], 'Validation')
  inputs:
    azureSubscription: $(AZURE_RM_SVC_CONNECTION)
    scriptLocation: inlineScript
    workingDirectory: $(Pipeline.Workspace)/$(armArtifactName)/scripts
    inlineScript: 'sh check-keyvault.sh $(BASE_NAME) $(ENV) $(RESOURCE_GROUP_NAME)'




# # Machine Learning Infrastructure Release
# #
# # This pipeline's scope is to validate and deploy infrastructural
# # changes to the training environments for machine learning. This includes:
# #
# # * a stage to publish ARM templates and tests
# # * a stage to deploy and validate the functional working of the
# #   deployed infrastructure in an integration environment
# #
# # This pipeline is automatically triggered on any change in the arm-templates
# # folder containing this ADO pipeline definition and infra-as-code.

# trigger:
#   branches:
#     include:
#     - master

#   paths:
#     include:
#     - infrastructure/arm-templates/*
#     - infrastructure/deploy-infra/*


# # loading all variables groups once, to resolve Azure DevOps problems with resolving variables
# variables:
# - group: mlops-vg-dev


# stages:
# # Validate and publish dependencies for downstream stages
# - stage: Build
#   displayName: 'IaC Build'
#   jobs:
#   - job: Build
#     pool:
#         # does not make sense to use self-hosted agents here
#         vmImage: 'ubuntu-latest'
#     steps:   
#     - task: CopyFiles@2
#       displayName: 'Copy Deployment scripts'
#       inputs:
#         sourceFolder: 'infrastructure/deployment-scripts'
#         targetFolder: '$(Build.ArtifactStagingDirectory)/scripts'
#     - task: CopyFiles@2
#       displayName: 'Copy ARM templates'
#       inputs:
#         sourceFolder: 'infrastructure/arm-templates'
#         targetFolder: '$(Build.ArtifactStagingDirectory)'
#     - publish: '$(Build.ArtifactStagingDirectory)'
#       artifact: IaCAndTests

# # Deploy Dev 
# - stage: DeployDevInfra
#   displayName: 'Deploy: DEV'
#   dependsOn: build
#   variables:
#   - group: mlops-vg-dev
#   - name: armArtifactName
#     value: IaCAndTests
#   - name: RESOURCE_GROUP_NAME
#     value: $(BASE_NAME)-rg-$(ENV)

#   jobs:
#   - template: ado-template-mlenv.yml
#     parameters:
#       environment: RESOURCE_GROUP_NAME
#       vmImage: 'ubuntu-latest'
