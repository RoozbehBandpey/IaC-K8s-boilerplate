{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workstreamName": {
            "type": "string",
            "metadata": {
                "description": "Name of the workstream the resource is for"
            }
        },
        "purpose": {
            "type": "string",
            "metadata": {
                "description": "Purpose of the resource, will be part of the resource's name"
            }
        },
        "env": {
            "type": "string",
            "allowedValues": [
                "dev",
                "int",
                "prd"
            ],
            "metadata": {
                "description": "Environment the resource will be deployed to"
            }
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "[concat('atiit4ad-network-vnet-', parameters('env'))]",
            "metadata": {
                "description": "Name of the VNET the resource will be bound to"
            }
        },
        "subnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet the resource will be bound to"
            }
        },
        "vnetResourceGroupName": {
            "type": "string",
            "defaultValue": "[concat('atiit4ad-network-', parameters('env'))]",
            "metadata": {
                "description": "Name of the resource group of the VNET the resource will be bound to"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Region the resource will be deployed to"
            }
        },
        "dnsPrefix": {
            "type": "string",
            "defaultValue": "[concat(parameters('workstreamName'), '-', parameters('purpose'), '-aks-', parameters('env'), '-dns')]",
            "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
            }
        },
        "osDiskSizeGB": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "Disk size (in GiB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            },
            "minValue": 0,
            "maxValue": 1023
        },
        "agentCount": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "The number of agent nodes for the cluster."
            },
            "minValue": 1,
            "maxValue": 100
        },
        "enableAutoScaling": {
            "type": "bool",
            "defaultValue": "false",
            "metadata": {
                "description": "Whether to enable auto-scaler or not. Requires VMSS and min/maxCount."
            }
        },
        "minCount": {
            "type": "int",
            "minValue": 1,
            "defaultValue": 1,
            "metadata": {
                "description": "Minimum number of nodes for auto-scaling"
            }
        },
        "maxCount": {
            "type": "int",
            "minValue": 1,
            "defaultValue": "[parameters('agentCount')]",
            "maxValue": 100,
            "metadata": {
                "description": "Maximum number of nodes for auto-scaling"
            }
        },
        "agentVMSize": {
            "type": "string",
            "defaultValue": "Standard_D2_v2",
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "servicePrincipalClientId": {
            "metadata": {
                "description": "Client ID (used by cloudprovider)."
            },
            "type": "securestring"
        },
        "servicePrincipalClientSecret": {
            "metadata": {
                "description": "The Service Principal Client Secret."
            },
            "type": "securestring"
        },
        "osType": {
            "type": "string",
            "defaultValue": "Linux",
            "allowedValues": [
                "Linux"
            ],
            "metadata": {
                "description": "The type of operating system."
            }
        },
        "kubernetesVersion": {
            "type": "string",
            "defaultValue": "1.13.11",
            "metadata": {
                "description": "The version of Kubernetes."
            }
        },
        "networkPlugin": {
            "type": "string",
            "defaultValue": "azure",
            "allowedValues": [
                "azure",
                "kubenet"
            ],
            "metadata": {
                "description": "Network plugin used for building Kubernetes network."
            }
        },
         "serviceCidr": {
            "type": "string",
            "metadata": {
                "description": "A CIDR notation IP range from which to assign service cluster IPs. Must not overlap with VNET adress space"
            }
        },
        "dnsServiceIP": {
            "type": "string",
            "metadata": {
                "description": "Containers DNS server IP address."
            }
        },
        "dockerBridgeCidr": {
            "type": "string",
            "metadata": {
                "description": "A CIDR notation IP for Docker bridge. Must not be from serviceCidr space."
            }
        },
        "omsWorkspaceId": {
            "type": "string",
            "metadata": {
                "description": "Specify the resource id of the OMS workspace."
            }
        },
        "azureCUAguid": {
            "type": "string",
            "metadata": {
                "description": "Azure CUA GUID (with pid-prefix) used for Resource Tracking."
            },
            "defaultValue": "pid-a79fe048-6869-45ac-8683-7fd2446fc73c"
        }
    },
    "variables": {
        "aksName": "[concat(parameters('workstreamName'), '-', parameters('purpose'), '-aks-', parameters('env'))]",
        "subnetId": "[resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets/', parameters('vnetName'), parameters('subnetName'))]"
    },
    "resources": [
        { 
            "apiVersion": "2019-09-01",
            "name": "[parameters('azureCUAguid')]", 
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "apiVersion": "2019-08-01",
            "type": "Microsoft.ContainerService/managedClusters",
            "location": "[parameters('location')]",
            "name": "[variables('aksName')]",
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "enableRBAC": true,
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "agentPoolProfiles": [
                    {
                        "name": "agentpool",
                        "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                        "count": "[parameters('agentCount')]",
                        "vmSize": "[parameters('agentVMSize')]",
                        "osType": "[parameters('osType')]",
                        "enableAutoScaling": "[parameters('enableAutoScaling')]",
                        "minCount": "[parameters('minCount')]",
                        "maxCount": "[parameters('maxCount')]",
                        "storageProfile": "ManagedDisks",
                        "type": "VirtualMachineScaleSets",
                        "vnetSubnetID": "[variables('subnetId')]"
                    }
                ],
                "servicePrincipalProfile": {
                    "ClientId": "[parameters('servicePrincipalClientId')]",
                    "Secret": "[parameters('servicePrincipalClientSecret')]"
                },
                "networkProfile": {
                    "networkPlugin": "[parameters('networkPlugin')]",
                    "serviceCidr": "[parameters('serviceCidr')]",
                    "dnsServiceIP": "[parameters('dnsServiceIP')]",
                    "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]"
                },
                "addonProfiles": {
                    "httpApplicationRouting": {
                        "enabled": false
                    },
                    "omsagent": {
                        "enabled": true,
                        "config": {
                            "logAnalyticsWorkspaceResourceID": "[parameters('omsWorkspaceId')]"
                        }
                    }
                }
            }
        }
    ],
    "outputs": {
        "resourceName": {
            "type": "string",
            "value": "[variables('aksName')]"
        },
        "resourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksName'))]"
        }
    }
}
